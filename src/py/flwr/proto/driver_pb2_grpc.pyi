"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import flwr.proto.driver_pb2
import flwr.proto.minio_pb2
import grpc
import typing

class DriverStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateRun: grpc.UnaryStreamMultiCallable[
        flwr.proto.driver_pb2.CreateRunRequest,
        flwr.proto.driver_pb2.CreateRunResponseBatch]
    """Request run_id"""

    CreateRunMinIO: grpc.UnaryUnaryMultiCallable[
        flwr.proto.minio_pb2.MessageMinIO,
        flwr.proto.minio_pb2.MessageMinIO]

    GetNodes: grpc.StreamStreamMultiCallable[
        flwr.proto.driver_pb2.GetNodesRequestBatch,
        flwr.proto.driver_pb2.GetNodesResponseBatch]
    """Return a set of nodes"""

    GetNodesMinIO: grpc.UnaryUnaryMultiCallable[
        flwr.proto.minio_pb2.MessageMinIO,
        flwr.proto.minio_pb2.MessageMinIO]

    PushTaskIns: grpc.StreamStreamMultiCallable[
        flwr.proto.driver_pb2.PushTaskInsRequestBatch,
        flwr.proto.driver_pb2.PushTaskInsResponseBatch]
    """Create one or more tasks"""

    PushTaskInsMinIO: grpc.UnaryUnaryMultiCallable[
        flwr.proto.minio_pb2.MessageMinIO,
        flwr.proto.minio_pb2.MessageMinIO]

    PullTaskRes: grpc.StreamStreamMultiCallable[
        flwr.proto.driver_pb2.PullTaskResRequestBatch,
        flwr.proto.driver_pb2.PullTaskResResponseBatch]
    """Get task results"""

    PullTaskResMinIO: grpc.UnaryUnaryMultiCallable[
        flwr.proto.minio_pb2.MessageMinIO,
        flwr.proto.minio_pb2.MessageMinIO]


class DriverServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateRun(self,
        request: flwr.proto.driver_pb2.CreateRunRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[flwr.proto.driver_pb2.CreateRunResponseBatch]:
        """Request run_id"""
        pass

    @abc.abstractmethod
    def CreateRunMinIO(self,
        request: flwr.proto.minio_pb2.MessageMinIO,
        context: grpc.ServicerContext,
    ) -> flwr.proto.minio_pb2.MessageMinIO: ...

    @abc.abstractmethod
    def GetNodes(self,
        request_iterator: typing.Iterator[flwr.proto.driver_pb2.GetNodesRequestBatch],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[flwr.proto.driver_pb2.GetNodesResponseBatch]:
        """Return a set of nodes"""
        pass

    @abc.abstractmethod
    def GetNodesMinIO(self,
        request: flwr.proto.minio_pb2.MessageMinIO,
        context: grpc.ServicerContext,
    ) -> flwr.proto.minio_pb2.MessageMinIO: ...

    @abc.abstractmethod
    def PushTaskIns(self,
        request_iterator: typing.Iterator[flwr.proto.driver_pb2.PushTaskInsRequestBatch],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[flwr.proto.driver_pb2.PushTaskInsResponseBatch]:
        """Create one or more tasks"""
        pass

    @abc.abstractmethod
    def PushTaskInsMinIO(self,
        request: flwr.proto.minio_pb2.MessageMinIO,
        context: grpc.ServicerContext,
    ) -> flwr.proto.minio_pb2.MessageMinIO: ...

    @abc.abstractmethod
    def PullTaskRes(self,
        request_iterator: typing.Iterator[flwr.proto.driver_pb2.PullTaskResRequestBatch],
        context: grpc.ServicerContext,
    ) -> typing.Iterator[flwr.proto.driver_pb2.PullTaskResResponseBatch]:
        """Get task results"""
        pass

    @abc.abstractmethod
    def PullTaskResMinIO(self,
        request: flwr.proto.minio_pb2.MessageMinIO,
        context: grpc.ServicerContext,
    ) -> flwr.proto.minio_pb2.MessageMinIO: ...


def add_DriverServicer_to_server(servicer: DriverServicer, server: grpc.Server) -> None: ...
