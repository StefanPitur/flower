// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================

syntax = "proto3";

package flwr.proto;

import "flwr/proto/minio.proto";
import "flwr/proto/node.proto";
import "flwr/proto/task.proto";

service Driver {
  // Request run_id
  rpc CreateRun(CreateRunRequest) returns (stream CreateRunResponseBatch) {}
  rpc CreateRunMinIO(MessageMinIO) returns (MessageMinIO) {}

  // Return a set of nodes
  rpc GetNodes(stream GetNodesRequestBatch) returns (stream GetNodesResponseBatch) {}
  rpc GetNodesMinIO(MessageMinIO) returns (MessageMinIO) {}

  // Create one or more tasks
  rpc PushTaskIns(stream PushTaskInsRequestBatch) returns (stream PushTaskInsResponseBatch) {}
  rpc PushTaskInsMinIO(MessageMinIO) returns (MessageMinIO) {}

  // Get task results
  rpc PullTaskRes(stream PullTaskResRequestBatch) returns (stream PullTaskResResponseBatch) {}
  rpc PullTaskResMinIO(MessageMinIO) returns (MessageMinIO) {}
}

// CreateRun
message CreateRunResponseBatch {
  bytes message_batch_bytes = 1;
}

message CreateRunRequest {}
message CreateRunResponse { sint64 run_id = 1; }

// GetNodes messages
message GetNodesRequestBatch {
  bytes message_batch_bytes = 1;
}
message GetNodesResponseBatch {
  bytes message_batch_bytes = 1;
}

message GetNodesRequest { sint64 run_id = 1; }
message GetNodesResponse { repeated Node nodes = 1; }

// PushTaskIns messages
message PushTaskInsRequestBatch {
  bytes message_batch_bytes = 1;
}
message PushTaskInsResponseBatch {
  bytes message_batch_bytes = 1;
}

message PushTaskInsRequest { repeated TaskIns task_ins_list = 1; }
message PushTaskInsResponse { repeated string task_ids = 2; }

// PullTaskRes messages
message PullTaskResRequestBatch {
  bytes message_batch_bytes = 1;
}
message PullTaskResResponseBatch {
  bytes message_batch_bytes = 1;
}

message PullTaskResRequest {
  Node node = 1;
  repeated string task_ids = 2;
}
message PullTaskResResponse { repeated TaskRes task_res_list = 1; }
